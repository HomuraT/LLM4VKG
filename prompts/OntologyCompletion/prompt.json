{
  "pair_prediction": {
  "content": "You are an assistant that evaluates the relationship between a source concept and a list of target concepts.\nExamples:\nSource: Person, Target: Student\nLabel: mismatched\nExplaination: Person is not a sub concept of Student\n\nSource Student Target Person\nLabel: moderately matching\nExplaination: Student is a sub concept of Person\n\nSource People Target Person\nLabel: highly matching\n\n**Source Concept**: {{ source_concept }}\n\n**Target Concepts**:\n{% for concept in target_concepts %}\n- {{ concept }}\n{% endfor %}\n\n**Task**:\nDetermine if each target concept matches the source concept based on the following labels:\n\n**Labels**:\n- **\"highly matching\"** – The target concept is highly aligned and strongly related to the source concept in purpose or meaning.\n- **\"moderately matching\"** – The target concept may be a sub-concept of the source concept.\n- **\"mismatched\"** – The target concept is not highly aligned or strongly related to the source concept and is not a sub-concept.\n\n**Instructions**:\n- Assign one of the labels to each target concept.\n- If all target concepts are labeled as \"mismatched\", set the predicted concept to \"None\".\n\n**Output**:\nProvide **one** target concept along with its corresponding label.\n",
  "vars": ["source_concept ", "target_concepts "]
  },
  "generate_variable_name": {
  "content": "** Response Json Format:**\n{\t\"name\": \"Student\" }\n{\t\"name\": \"hasName\" }\n\n{% if example%}\n## Example\n{{example}}\n{% endif %}\n\n{% if source_DB_concept and not target_DB_concept and not target_Ontology_concept %}\n** Task**\nGenerate a semantically rich variable name.\nExamples:\nstudent -> Student\nDocuments -> Document\ntable_person -> Person\nstudent.name.string -> hasName\nstudent.age.int -> hasAge\nteacher.teach.int -> teach\n\n- **Source Database Concept**:\n{{ source_DB_concept }}\n\n**Instructions**:\nGenerate a more semantically meaningful variable name for the database concept \"{{ source_DB_concept }}\". The current database variable names might be ambiguous, such as \"tname\" or \"pname\".\nNote: the response must follow the \"response json format\". The generated name should be as easy as possible. For example, \"Student\" is better than \"StudentMember\".\n\n---\n\n{% elif source_DB_concept and target_DB_concept and not target_Ontology_concept %}\n** Task **\nGenerate a relationship name.\nExamples:\nTeacher, Student -> teach\nStudent, Teacher -> taughtBy\nPerson, Book -> read \n\n\n- **Source Database Concept**:\n{{ source_DB_concept }}\n\n- **Target Database Concept**:\n{{ target_DB_concept }}\n\n**Instructions**:\nGenerate a relationship name that represents the relationship from \"{{ source_DB_concept }}\" to \"{{ target_DB_concept }}\". For example, for concepts \"Student\" and \"Teacher\", a suitable relationship name could be \"taughtBy\".\n\n---\n\n{% elif source_DB_concept and not target_DB_concept and target_Ontology_concept %}\n** Task **\nGenerate a sub-class or sub-property variable name.\nExamples:\nstudent, Person -> Student\ntable_book, Document -> Book\nTeacher, Person -> Teacher\n\n- **Source Database Concept**:\n{{ source_DB_concept }}\n\n- **Target Ontology Concept**:\n{{ target_Ontology_concept }}\n\n**Instructions**:\nGenerate a variable name that indicates the database concept \"{{ source_DB_concept }}\" is a sub-class or sub-property of the ontology concept \"{{ target_Ontology_concept }}\". Ensure the variable name is relevant to \"{{ source_DB_concept }}\".\nIf \"{{ source_DB_concept }}\" is already suitable, just repeat it.\n\n---\n\n{% else %}\n## Task\n**Objective**: Provide valid input parameters.\n\n**Instructions**:\nPlease provide at least the `source_DB_concept`. You can optionally provide either `target_DB_concept` or `target_Ontology_concept` to generate appropriate variable names or relationship names.\n\n---\n{% endif %}\n\nNote: the response must follow the \"response json format\". The generated name should be as easy as possible. For example, \"Student\" is better than \"StudentMember\".\n\n### Response",
  "vars": ["source_DB_concept"], "partial_vars": {"target_DB_concept": null, "target_Ontology_concept": null, "example": null}
  },
  "judge_order_and_rename": {
  "content": "**Task Prompt:**\n\nGiven two relations that describe a relationship between entities (e.g., `Author` and `Paper`), create a new relation for two concepts. Here's how to approach the task:\n\n---\n\n**Example 1:**\n\n**Input:**\n\n1. Relation 1: `(Authors, author_paper, Papers)`\n2. Relation 2: `(Papers, author_paper, Persons)`\n\n**Expected Output:**\n\n{\n  \"Relation between Authors and Papers\": \"write\",\n  \"Realtion between Papers and Authors\": \"writtenBy\"\n}\n\n\n---\n\n**Example 2:**\n\n**Input:**\n\n1. Relation 1: `(Teacher, teaches, Student)`\n2. Relation 2: `(Student, teaches, Teacher)`\n\n**Expected Output:**\n\n{\n  \"Relation between Teacher and Student\": \"teaches\",\n  \"Relation between Student and Teacher\": \"hasTeacher\"\n}\n\n\n---\n\n**Input Format:**\n\n1. Relation 1: `{{order1}}`\n2. Relation 2: `{{order2}}`\n\n**Reference**\nYou can refer to these relation names:\n{{refer_names}}\n\n**Expected Output Format:**\n",
  "vars": ["order1", "order2", "refer_names"]
  }
}